// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createAt  DateTime @default(now())
//   updateAt  DateTime @updatedAt
//   email     String   @unique
//   password  String
//   firstName String
//   lastName  String
// }

model User {
  id        Int   @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  email     String   @unique
  password  String
  firstName String
  lastName  String
}

model Product {
  id  Int @id @default(autoincrement())
  name  String
  description String
  number Int
  url String
  madein Madein @relation(fields: [madeinId], references: [id])
  madeinId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Category {
  id  Int @id @default(autoincrement())
  name String
  description String
  product Product[]
  variant Variant[]
  model Model[]
  brand Brand[]
}

model Madein {
  id Int @id @default(autoincrement())
  name String
  product Product[]
}

model Variant {
  id Int @id @default(autoincrement())
  medida String
  unit Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Model {
  id Int @id @default(autoincrement())
  name String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Brand {
  id Int @id @default(autoincrement())
  name String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
